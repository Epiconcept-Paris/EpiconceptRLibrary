source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
setwd("~/R/Librarie_R/trunk/Tests")
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
exp(M)
exp ( coef ( glm2b ))
M
exp ( coef ( M ))
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
exp ( coef ( M ))
R <- exp ( coef ( M ))
class(R)
as.data.frame(R)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Epiconcepts/R/ec.logistic.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
library(Epiconcepts)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
logLik(M)
R <- logLik(M)
R
str(R)
R
R[1]
R[2]
R[0]
R[1]
R@df
R$df
R[[1]]
R[[2]]
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
M$Design
M$stats
as.dataf.rame(M$stats)
as.data.frame(M$stats)
df <- as.data.frame(M$stats)
df[Obs,]
df["Obs",]
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
M$stats
df <- as.data.frame(M$stats)
df
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
df <- as.data.frame(M$stats)
df
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
df
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
3.494525 + .4436909
3.494525 + 4.364143
4.364143 +  .4436909
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
M$coefficients
exp(78.5820106)
exp(0.4437)
exp(0.3862)
M
M$sumwty
M$stats
M$coefficients
M$var
M$u
M$est
M$deviance
M$linear.predictors
M$weights
M$call
M$non.slopes
M$info.matrix
M$nstrata
M$interceptRef
M$terms
M$Design
log(78.58201)*[1 + 1,96 / (sqrt(185.04)]
log(78.58201)*[1 + 1,96 / (sqrt(185.04))
log(78.58201)*(1 + 1.96 / (sqrt(185.04))
)
log(78.58201)*(1 + 1.96 / (sqrt(185.04)))
2.71828182845904 ^ log(78.58201)*(1 + 1.96 / (sqrt(185.04)))
M$freq
2.71828182845904 ^ (log(78.58201)*(1 + 1.96 / (sqrt(185.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(185.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(185.04))))
185-78
M
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(145.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(125.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(105.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(78.04))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(78.56))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(88.56))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(92.56))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(92.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(93.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(94.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(95.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(96.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(96.9))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(96.8))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(96.7))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(96.72))))
78+17
78-17
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(61))))
2.71828182845904 ^ (log(78.58201)*(1 - 1.96 / (sqrt(185))))
2.71828182845904 ^ (log(14.218)*(1 - 1.96 / (sqrt(174))))
2.71828182845904 ^ (log(14.218)*(1 + 1.96 / (sqrt(174))))
2.71828182845904 ^ (log(14.21641)*(1 + 1.96 / (sqrt(174))))
2.71828182845904 ^ (log(14.21641)*(1 + 1.96 / (sqrt(174.1))))
glm(formula = ill ~tira, data = GDS)
glm(formula = ill ~tira, method = "bilinear", data = GDS)
glm(formula = ill ~tira, method = "logistic", data = GDS)
glm(formula = ill ~tira, method = "logit", data = GDS)
M
exp(confint(M, 0.95))
exp(confint(M))
glm(ill ~tira, family="binomial")
glm(ill ~tira, family="binomial", data=GDS)
g <- glm(ill ~tira, family="binomial", data=GDS)
summary(g)
exp(coef(g))
exp(confint(g))
exp(confint(g, level=0.95))
exp(confint(g, level = 0.95))
exp(confint(g, level = 95))
exp(confint(g, level = 0.05))
exp(confint(g, level = 0.99))
exp(confint(g, level = 0.9))
exp(confint(g, level = 0.92))
exp(confint(g, level = 0.94))
exp(confint(g, level = 0.95))
exp(confint(g, level = 0.94))
exp(confint(g, level = 0.92))
exp(confint(g, level = 0.91))
exp(confint(g, level = 0.90))
exp(confint(g))
exp(confint(M))
glm(M)
glm(M, family="binomial")
g <- glm(M, family="binomial")
exp(confint(M))
exp(confint(g))
exp(coef(g))
exp(confint(g,level = 0.95))
exp(confint(g)
)
exp(confint(g))
c <- exp(confint(g))
c
class(c)
as.data.frame(c)
class(c)
c <- as.data.frame(c)
class(c)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R')
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
OUTPUT_FORMAT = T
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
rm(OUTPUT_FORMAT)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
M
exp(0.4437)
exp(4.3641)
G <- glm(M, family = "binomial")
G
summary(G)
exp(4.3641)
exp(0.4437)
str()
str(G)
G$coefficients
G$coefficients
G$residuals
G$residuals
G$fitted.values
G$deviance
G$null.deviance
G$terms
M
require(epicalc)
logistic.display(M)
install.packages("epicalc")
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
78.58201 - 32.93463
exp(1.96 * 0.3862)
source('~/R/Librarie_R/trunk/Tests/Test_RegLog.R', echo=TRUE)
(log(203.48219359) - log(35.02913548))/ 3.92
(203.48219359 - 35.02913548)/ 3.92
(203.48219359 - 35.02913548)/ 1.96
(187.4966 - 32.93463)/ 3.92
(log(187.4966) - log(32.93463))/ 3.92
exp(0.44)
(exo(log(187.4966) - log(32.93463)))/ 3.92
(exp(log(187.4966) - log(32.93463)))/ 3.92
(exp(log(187.4966) - log(32.93463))/ 3.92)
(187.4966 - 32.93463)/ 3.92
185.04 / 9.84
(log(187.4966) - log(32.93463))/ 3.92
187-32
187-32 / 3.92
(187-32) / 3.92
exp(0.4436827)
(187-32) / exp(3.92)
(187-32) / log(3.92)
(187-32) / 34.86
(187-32) / log(34.86)
(187-32) / 9.84
2*(187-32) / 9.84
(5.233761 - 3.494525) / 3.92
exp(0.4436827)
exp(0.4436827) * 20
78.58201 * .4436909
(187-32) / 3.92
setwd("~/R/Librarie_R/trunk/Tests")
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
str(iris)
log(iris$SL)
iris$LogSL <- log(iris$SL)
str(iris)
plot(iris$LogSL)
iris$myFun <- iris$SL + 10
View(iris)
iris$myFun <- iris$SL + iris$SW
View(iris)
iris$SL <- iris$SL/sum(iris$SL)
c1 <- iris$SL/sum(iris$SL)
iris$Species <- NULL
R <- apply(iris,1 mean)
R <- apply(iris,1, mean)
R
R2 <- apply(iris,2 mean)
R2 <- apply(iris,2, mean)
str'iris'
str(iris)
# APPLY on each row
iris$meanrow <- apply(iris, 1, mean)
data(iris)
str(iris)
# Modify colnames
colnames(iris) <- c("SL","SW","PL","PW","Species")
str(iris)
# Create a new col with log values
iris$LogSL <- log(iris$SL)
str(iris)
# Deleting column 'Species'
iris$myFun <- iris$SL + 10
# APPLY on each row
iris$meanrow <- apply(iris, 1, mean)
# APPLY on each col and add line in dataset
R <- apply(iris, 2, mean)
iris <- rbind(iris, R)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
rownames(iris)[151] <- "MEAN"
View(iris)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
MLOG((100))
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
head(iris)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
str(R)
as.vector(R)
R
class(R)
data <- ChickWeight
str(data)
head(data)
View(data)
data <- ChickWeight
head(data)
aggregate(data$weight, list(diet = data$Diet), mean)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
View(data)
library(data.table)
install.packages("data.table")
library(data.table)
options(datatable.optimize=1)
DT <- data.table(data)
SDF <- DT[, lapply(.SD, mean), by = Diet, .SDcols = 1];
SDF
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
View(iris)
data(iris)
iris
df <- iris
df[, 5] <- sapply(df[,1], function(x) substr(x, 1,4));
head(df)
df <- iris
df$species <- sapply(df[,5], function(x) substr(x, 1,4));
head(df)
# AGGREGATE
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_apply.R', echo=TRUE)
data(iris)
df <- iris
df$Species <- sapply(df[,5], function(x) substr(x, 1,4));
head(df)
df <- iris
df$Species <- sapply(df$Species, function(x) substr(x, 1,4));
head(df)
apply(iris, 2, function(x) mean(x[x>5]))
apply(iris, 1, function(x) mean(x[x>5]))
options(datatable.optimize=1)
D1 <- iris
D2 <- iris$Species
D2$CR <- iris$Petal.Length / mean(iris$Petal.Length)
D2$CR
head(D2)
join(D1, D2, type="left", match="first");
options(datatable.optimize=1)
D1 <- iris
D2 <- iris$Species
D2$CR <- iris$Petal.Length / mean(iris$Petal.Length)
D2 <- as.data.frame(D2);
join(D1, D2, type="left", match="first");
D2 <- iris$Species
D2$CR <- iris$Petal.Length / mean(iris$Petal.Length)
D2 <- as.data.frame(D2);
join(D1, D2, type="left", match="first");
merge(x = D1, y = D2, by = "Species", all = TRUE)
View(D1)
?merge
View(D2)
options(datatable.optimize=1)
D1 <- iris
C1 <- labels(iris$Species)
C2 <- c(1:10)
D2 <- data.frame(cbind(C1,C2));
#join(D1, D2, type="left", match="first");
merge(x = D1, y = D2, by = "Species", all = TRUE)
D2
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
merge(x = D1, y = D2, by = "Species", all = TRUE)
D1 <- iris
C1 <- labels(iris$Species)
C2 <- c(1:10)
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
merge(x = D1, y = D2, by = "Species", all.y = TRUE)
label(iris$species)
labels(iris$species)
labels(iris$species)
factors(iris$species)
iris$species
iris$Species
levels(iris$Species)
C1 <- levels(iris$Species)
C2 <- c(A:C)
C1 <- levels(iris$Species)
C2 <- c("A","B","C")
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
merge(x = D1, y = D2, by = "Species", all.y = TRUE)
merge(x = D1, y = D2, by = "Species", all.y = TRUE)
head(D1)
D1 <- merge(x = D1, y = D2, by = "Species", all.y = TRUE)
head(D1)
D1 <- merge(x = D1, y = D2, by = "Species", all = TRUE)
str(D1)
D1 <- merge(x = D1, y = D2, by = "Species", all.y = TRUE)
str(D1)
D1 <- iris
C1 <- levels(iris$Species)
C2 <- c("A","B","C")
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
df1 <- merge(x = D1, y = D2, by = "Species", all = TRUE)
str(df1)
df2 <- merge(x = D1, y = D2, by = "Species", all.y = TRUE)
str(df2)
df3 <- merge(x = D1, y = D2, by = "Species", all.x = TRUE)
head(df3)
str(df3)
View(df1)
View(df2)
View(df3)
merge(x = D2, y = D1, by = "Species", all.x = TRUE)
D1 <- iris
C1 <- c(levels(iris$Species), "Unknown")
C2 <- c("A","B","C")
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
C2 <- c("A","B","C", "U")
D2 <- data.frame(cbind(C1,C2));
colnames(D2) <- c("Species", "test")
#join(D1, D2, type="left", match="first");
df1 <- merge(x = D1, y = D2, by = "Species", all = TRUE)
str(df1)
View(df1)
merge(x = D2, y = D1, by = "Species", all.x = TRUE)
merge(x = D2, y = D1, by = "Species", all.Y = TRUE)
