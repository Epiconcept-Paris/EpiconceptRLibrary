{
    "contents" : "library(methods)\n\nsetClass(\"CC\",\n         # ==== Inheritance\n         # ==== Properties\n         representation (\n           varname        = \"character\",\n           detail         = \"logical\",\n           by             = \"character\",\n           to             = \"character\",\n           CC             = \"data.frame\",\n           ExposeField   = \"character\",\n           Colnames       = \"character\",\n           TotalExposed   = \"numeric\",\n           TotalUnexposed = \"vector\",\n           CasesExposed   = \"vector\",\n           CasesUnexposed = \"vector\",\n           ARExposed      = \"vector\",\n           ARUnexposed    = \"vector\",\n           RiskRatio      = \"vector\",\n           RiskCILow      = \"vector\",\n           RiskCIHight    = \"vector\",\n           Pvalue         = \"vector\"\n         )           \n)\n\n# ------------------------------------------------------------------------------\n# Real constructor\n# ------------------------------------------------------------------------------\nsetMethod(\"initialize\", \"CC\",\n  function(.Object, x, exposure=\"\", exact, where, title)\n  {\n    \n    #.Object <-  .Object;\n\n    if (length(exposure) < 1) {\n      stop(\"Exposure list is empty.\");\n    }\n            \n    PLabel = ifelse(exact == T, \"p-value (Fisher)\", \"p-value (chi2)\")\n            \n    .Object@ExposeField = exposure;\n    .Col1Label = ifelse(title==\"\", sprintf(\"CC %s %s\", x, exposure), title);\n    .Object@Colnames = c( .Col1Label, \"Exposed\", \"Unexposed\", \"Total\", \"Proportion Exp.\");\n    .Col1Values = c(\"Cases\", \"Controls\", \"Total\", \"\", \"\", \"Odds ratio\",\n                    \"Attr. frac. ex.\", \"Attr. frac. pop\", \"chi2(1)\", \"Pr>chi2\")\n\n    computeKHI2 <- function(A, B, C, D)\n    {\n      t <- chisq.test(matrix(c(A,B,C,D),nc=2), correct=FALSE);\n      return(c(t$statistic, t$p.value));\n    }\n\n    GDS = get(\"GDS\", envir=.GlobalEnv);\n    \n    if (length(where) > 0) {\n      FR = table(GDS[where, x], GDS[where, exposure])\n    } else {\n      FR = table(VAL(x), VAL(exposure));\n    }\n    I1E1 = FR[2,2]\n    I1E0 = FR[2,1]\n    I0E0 = FR[1,1]\n    I0E1 = FR[1,2]\n\n    CHI2 = computeKHI2(FR[1,1], FR[2,1], FR[1,2], FR[2,2]);\n    TE = FR[1,2]+FR[2,2];\n    TU = FR[1,1]+FR[2,1];\n    TCA = I1E1 + I1E0;\n    TNC = I0E1 + I0E0;\n\n    ##########   Proportions  ##########\n    PCAEX = sprintf(\"%3.5f\", I1E1/TCA);\n    PCTEX = sprintf(\"%3.5f\", I0E1/TNC);\n    PTOEX = sprintf(\"%3.5f\", TE/(TCA+TNC));\n\n    # Risk\n    VAL_RE = I1E1/TE;\n    VAL_RU = I1E0/TU;\n    VAL_RT = TCA/(TE+TU);\n    RE = sprintf(\"%3.5f\", VAL_RE);\n    RU = sprintf(\"%3.5f\", VAL_RU);\n    RTOT = sprintf(\"%3.5f\", VAL_RT);\n\n    ########## ESTIMATE ##########\n    R = or(FR);\n    OREST = sprintf(\"%3.5f\", R[1]);\n    ORCIL = sprintf(\"%3.5f\", R[2]);\n    ORCIH = sprintf(\"%3.5f\", R[3]);\n  \n    if (R[1] > 1.0) {\n      R = CC_STATS(FR);\n      AFEST = sprintf(\"%3.5f\", R$AFest[1]);\n      AFCIL = sprintf(\"%3.5f\", R$AFest[2]);\n      AFCIH = sprintf(\"%3.5f\", R$AFest[3]);\n   \n      PAEST = sprintf(\"%3.5f\", R$AFp[1]);\n    }\n    else {\n      AFEST = sprintf(\"%3.5f\", 1 - R[1]);\n      AFCIL = sprintf(\"%3.5f\", 1 - R[3]);\n              AFCIH = sprintf(\"%3.5f\", 1 - R[2]);\n              \n              Pe = TE / (TE + TU);\n              PAEST = sprintf(\"%3.5f\", Pe * (1 - R[1]));\n              .Col1Values = c(\"Cases\", \"Controls\", \"Total\", \"\", \"\", \"Odds ratio\",\n                              \"Prev. frac. ex.\", \"Prev. frac. pop\", \"chi2(1)\", \"Pr>chi2\")\n            }\n\n    STR_CHI2 = sprintf(\"%3.6f\", CHI2[1]);\n    STR_PVAL = sprintf(\"%3.6f\", CHI2[2]);\n            \n    COL2 = as.character(c(I1E1, I0E1, TE, \"\", \"Point estimate\", OREST, AFEST, PAEST, STR_CHI2, STR_PVAL));\n    COL3 = as.character(c(I1E0, I0E0, TU, \"\",  \"95%CILow\", ORCIL, AFCIL, \"\", \"\", \"\"));\n    COL4 = as.character(c(TCA, TNC, TE+TU, \"\", \"95%CIHight\", ORCIH, AFCIH, \"\", \"\", \"\"));\n    COL5 = as.character(c(PCAEX, PCTEX, PTOEX, \"\", \"\", \"\", \"\", \"\", \"\", \"\"));\n            \n    DF <- data.frame(cbind(.Col1Values));\n    DF = cbind(DF, COL2, COL3, COL4, COL5);\n    names(DF) <- .Object@Colnames;\n            \n    .Object@CC <- DF;\n    .Object;\n  }\n);\n\n# -----------------------------------------------------------------------------\n# method show\n# -----------------------------------------------------------------------------\nsetMethod(\"show\" ,\"CC\" ,\n  function(object){\n    align  =  c(\"l\",\"r\",\"r\",\"r\",\"r\",\"r\");\n    ec.xtable(object@CC, align=align);\n  }\n)\n\n# -----------------------------------------------------------------------------\n# function: CC (call real constructor)\n# Return: an object of type CC\n# -----------------------------------------------------------------------------\nCC <- function(x, exposure=\"\", exact=FALSE, where=vector(), title=\"\")\n{\n  return(new(\"CC\", x=x, exposure=exposure, exact=exact, where=where, title=title));\n}\n",
    "created" : 1422529211853.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4098209372",
    "id" : "FD6F6A05",
    "lastKnownWriteTime" : 1422529631,
    "path" : "~/R HOUSE/Epiconcepts/R/CC.class.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}