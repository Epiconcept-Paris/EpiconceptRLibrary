{
    "contents" : "library(methods)\n\nsetClass(\"CCTable\",\n   # ==== Inheritance\n   # ==== Properties\n   representation (\n     varname        = \"character\",\n     detail         = \"logical\",\n     by             = \"character\",\n     to             = \"character\",\n     ExposeFields   = \"character\",\n     caption        = \"character\",\n     Colnames       = \"character\",\n     TotalCases     = \"vector\",\n     CasesExposed   = \"vector\",\n     CasesUnexposed = \"vector\",\n     PCAExposed     = \"vector\",\n     TotalCtrl      = \"vector\",\n     CtrlExposed    = \"vector\",\n     PCTExposed     = \"vector\",\n     OddsRatio      = \"vector\",\n     CILow          = \"vector\",\n     CIHight        = \"vector\",\n     Pvalue         = \"vector\",\n     cctable        = \"data.frame\"\n  )           \n)\n\n# ------------------------------------------------------------------------------\n# Real constructor\n# ------------------------------------------------------------------------------\nsetMethod(\"initialize\", \"CCTable\",\n  function(.Object, x, exposure=list(), exact, rr, ar, pvalue, caption)\n  {\n    .Object <-  .Object;\n    .Object@caption <- caption;\n    \n    if (length(exposure) < 1) {\n      stop(\"Exposure list is empty.\");\n    }\n            \n    PLabel = ifelse(exact == TRUE, \"p-value (Fisher)\", \"p-value (chi2)\")\n            \n    .Object@ExposeFields = as.vector(sapply(exposure, '[[', 1));\n    .Object@Colnames = c(\"Exposure\", \"T.Cases.\", \"Exposed\", \"%\", \"Tot.Ctrls\", \"Exposed\", \"%\",\n                                 \"Odds Ratio\", \"CI-Low\", \"CI-Hight\", PLabel);\n            \n            computeKHI2Pvalue <- function(A, B, C, D)\n            {\n              t <- chisq.test(matrix(c(A,B,C,D),nc=2), correct=FALSE);\n              return(sprintf(\"%3.3f\", t$p.value));\n            }\n            \n            computeFisherPvalue <- function(A, B, C, D)\n            {\n              t <- fisher.test(matrix(c(A,B,C,D),nc=2));\n              return(sprintf(\"%3.3f\", t$p.value));\n            }\n            \n            computeRiskCI <- function(risk, X1, N1, X2, N2)\n            {\n              A = ((N1-X1)/X1)/N1;\n              B = ((N2-X2)/X2)/N2;\n              R1 = log(risk) + (1.96*sqrt(A + B));\n              R2 = log(risk) - (1.96*sqrt(A + B));\n              E1 = exp(R1);\n              E2 = exp(R2);\n              \n              return(c(E2, E1));\n            }\n            \n            for (N in .Object@ExposeFields) {\n              FR = table(VAL(x), VAL(N));\n#              print(FR);\n              TE = FR[1,2]+FR[2,2];\n              TU = FR[1,1]+FR[2,1];\n              TCA = FR[2,1]+FR[2,2];\n              TCT = FR[1,1]+FR[1,2];\n              P1 = (FR[2,2]/TCA)*100;\n              P0 = (FR[1,2]/TCT)*100;\n              \n              .Object@TotalCases = c(.Object@TotalCases, TCA);\n              .Object@CasesExposed = c(.Object@CasesExposed, FR[2,2]);\n              .Object@PCAExposed = c(.Object@PCAExposed, as.numeric(sprintf(\"%3.2f\", P1)));\n              .Object@TotalCtrl = c(.Object@TotalCtrl, TCT);\n              .Object@CtrlExposed = c(.Object@CtrlExposed, FR[1,2]);\n              .Object@PCTExposed = c(.Object@PCTExposed, sprintf(\"%3.2f\", P0));\n              ODR = (FR[2,2]/FR[2,1]) / (FR[1,2]/FR[1,1]);\n              RR = ODR\n              .Object@OddsRatio = c(.Object@OddsRatio, as.numeric(sprintf(\"%3.2f\", ODR)));\n#               CI = computeOddsRatioCI(ODR, FR[1,1],FR[1,2],FR[2,1],FR[2,2]);\n              CI = computeExactORCI(FR[1,1],FR[1,2],FR[2,1],FR[2,2]);\n              .Object@CILow   = c(.Object@CILow, sprintf(\"%3.2f\", CI[1]))\n              .Object@CIHight = c(.Object@CIHight, sprintf(\"%3.2f\", CI[2]))\n              PV = sprintf(\"%3.3f\", CI[3]);\n              if (exact == FALSE) {\n                PV = computeKHI2Pvalue(FR[1,1], FR[2,1], FR[1,2], FR[2,2]);\n              }\n#               else {\n#                 PV = computeFisherPvalue(FR[1,1], FR[2,1], FR[1,2], FR[2,2]);    \n#               }\n              .Object@Pvalue = c(.Object@Pvalue, PV);\n            }\n            \n            \n            DF <- data.frame(cbind(.Object@ExposeFields));\n            DF = cbind(DF,\n                       .Object@TotalCases,\n                       .Object@CasesExposed,\n                       .Object@PCAExposed,\n                       .Object@TotalCtrl,\n                       .Object@CtrlExposed,\n                       .Object@PCTExposed,\n                       .Object@OddsRatio,\n                       .Object@CILow,\n                       .Object@CIHight,\n                       .Object@Pvalue\n            );\n            \n            names(DF) <- .Object@Colnames;\n            \n            if (rr == TRUE) {\n              DF <- DF[order(-DF[,8]),];\n            } else if (ar == T) {\n              DF <- DF[order(-DF[,4]),];\n            } else if (pvalue == T) {\n              DF <- DF[order(DF[,11]),];\n            }\n            \n    .Object@cctable <- DF;\n    .Object;\n  }\n);\n\n\n# -----------------------------------------------------------------------------\n# method show\n# -----------------------------------------------------------------------------\nsetMethod(\"show\" ,\"CCTable\" ,\n  function(object){\n    digits =  c(0,0,0,0,1,0,0,1,2,3,3,4);\n    align  =  c(\"l\",\"r\",\"c\",\"c\",\"r\",\"c\",\"c\",\"r\",\"r\",\"r\",\"r\",\"r\");\n    ec.xtable(object@cctable,  digits=digits, align=align, caption=object@caption);\n  }\n)\n\n# -----------------------------------------------------------------------------\n# function: CCTable (call real constructor)\n# Return: an object of type CCTable\n# -----------------------------------------------------------------------------\nCCTable <- function(x, exposure=list(), exact=TRUE, rr=FALSE, ar=FALSE, pvalue=TRUE, caption=\"CCTable\" )\n{\n  return(new(\"CCTable\", x=x, exposure=exposure, exact=exact, rr=rr, ar=ar, pvalue=pvalue, caption=caption));\n}\n",
    "created" : 1422529874813.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3474619275",
    "id" : "B1BAF420",
    "lastKnownWriteTime" : 1422529921,
    "path" : "~/R HOUSE/Epiconcepts/R/CCTable.class.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}