library(Epiconcepts)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
View(testDF)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.csinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
source('~/R/Librarie_R/trunk/Tests/Test_ecr.ccinter.R', echo=TRUE)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
data(iris)
ecr.rename(iris, "Sepal.Length", "SL")
iris <- ecr.rename(iris, "Sepal.Length", "SL")
str(iris)
library(Epiconcepts)
ec.Use("Tiramitsu", "df");
ec.rename('age','Age');
ec.use("Tiramitsu", "df");
ec.rename('age','Age');
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
ec.cc("ill", "tira")
library(Epiconcepts)
ec.cc("ill", "tira")
?ec.ccinter
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
library(Epiconcepts)
data(iris)
iris <- ec.move(tomove = "Species", where = "first")
iris <- ec.move(tomove = "Species", where = "first", df=iris)
str(iris)
library(Epiconcepts)
data(iris)
iris <- ec.move(tomove = "Species", where = "first", df=iris)
str(iris)
data(iris)
str(iris)
iris <- ec.move(tomove = "Species", where = "first", df=iris)
str(iris)
listing <- read.csv("~/R/listing.csv", encoding="UTF16", header=FALSE, sep=";", na.strings="")
View(listing)
head(listing$V39)
setwd("~/R")
df <- read.csv2("listing.csv")
View(df)
listing <- read.csv("~/R/listing.csv", sep=";")
View(listing)
rm(listing)
df2 <- read.csv("~/R/listing.csv", encoding="UTF16", sep=";", na.strings="")
View(df2)
df <- read.csv("~/R/listing.csv", sep=";")
View(df)
df$Durée.arrêt.travail
head(df$Durée.arrêt.travail)
ec.use("Tiramitsu", "df")
View(GDS)
GDS[GDS$tportion == 3, "tportion"]
GDS[GDS$tportion == 3, "tportion"] <- 2
GDS[GDS$tportion == 2, "tportion"]
length(GDS[GDS$tportion == 2, "tportion"])
complete.cases(GDS)
GDS <- GDS[complete.cases(GDS), ]
GDS[GDS$tportion == 3, "tportion"] <- 2
length(GDS[GDS$tportion == 2, "tportion"])
GDS <- GDS[GDS$tportion == 3, "tportion"] <- 2
length(GDS[GDS$tportion == 2, "tportion"])
ec.use("Tiramitsu", "df")
GDS <- GDS[complete.cases(GDS), ]
ec.use("Tiramitsu", "df")
GDS$tportion <- GDS[complete.cases(GDS$tportion), "tportion" ]
ec.use("Tiramitsu", "df")
GDS$tportion <- GDS[complete.cases(GDS$tportion),]
GDS <- GDS[complete.cases(GDS$tportion),]
GDS <- GDS[GDS$tportion == 3, "tportion"] <- 2
ec.use("Tiramitsu", "df")
GDS <- GDS[complete.cases(GDS$tportion),]
GDS$tportion <- GDS[GDS$tportion == 3, "tportion"] <- 2
length(GDS[GDS$tportion == 2, "tportion"])
View(GDS)
ec.use("Tiramitsu", "df")
GDS$tportion <- GDS[GDS$tportion == 3, "tportion"] <- 2
GDS$tportion <- GDS[GDS$tportion == 3 & !is.na(GDS$tportion), "tportion"] <- 2
length(GDS[GDS$tportion == 2, "tportion"])
ec.ccinter("ill", "mousse", by = "tportion")
ec.ccinter("ill", "tira")
ec.ccinter("ill", "tira", "beer")
ec.ccinter("ill", "mousse", "beer")
ec.ccinter("ill", "mousse", "tportion")
GDS$tportion
ec.use("Tiramitsu", "df")
ec.ccinter("ill", "mousse", "tportion")
ec.recode(tportion, list(VAL("tportion")==0),VAL("tportion")==1),VAL("tportion")==2), VAL("tportion")==3)),list(0,1,2,2))
ec.recode(tportion, list(VAL("tportion")==0,VAL("tportion")==1,VAL("tportion")==2, VAL("tportion")==3),list(0,1,2,2))
ec.recode("tportion", list(VAL("tportion")==0,VAL("tportion")==1,VAL("tportion")==2, VAL("tportion")==3),list(0,1,2,2))
View(GDS)
ec.ccinter("ill", "mousse", "tportion")
?epi.2by2
.T <- table(GDS[,"ill"], GDS[,"mouse"], GDS[,"tportion"])
.T <- table(GDS[,"ill"], GDS[,"mousse"], GDS[,"tportion"])
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="woolf")
library(epiR)
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="woolf")
summary(.R)
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="breslow.day")
summary(.R)
View(GDS)
write.csv2(GDS, "Tira1.csv")
.T <- table(GDS[,"ill"], GDS[,"mouse"])
.T <- table(GDS[,"ill"], GDS[,"mousse"])
.T <- table(GDS[,"ill"], GDS[,"mousse"], useNA="no")
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="breslow.day")
summary(.R)
.T <- table(GDS[,"ill"], GDS[,"mousse"], useNA="always")
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="breslow.day")
.T <- table(GDS[,"ill"], GDS[,"mousse"], useNA="no")
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="woolf")
summary(.R)
GDS <- GDS[!is.na(GDS$ill),]
GDS <- GDS[!is.na(GDS$mousse),]
.T <- table(GDS[,"ill"], GDS[,"mousse"])
.R = epi.2by2(dat=.T, method="case.control", outcome="as.columns", homogeneity="woolf")
summary(.R)
source('~/R/Librarie_R/trunk/Epiconcepts/R/01_EpiFuns.R', echo=TRUE)
.T <- table(GDS[,"ill"], GDS[,"mousse"])
res <- or(.T)
res
library(Epiconcepts)
