{
    "contents" : "library(methods)\n\nsetClass(\"CCInter\",\n         # ==== Inheritance\n         # ==== Properties\n         representation (\n           varname        = \"character\",\n           detail         = \"logical\",\n           by             = \"character\",\n           to             = \"character\",\n           ExposeField   = \"character\",\n           Colnames       = \"character\",\n           TotalExposed   = \"numeric\",\n           TotalUnexposed = \"vector\",\n           CasesExposed   = \"vector\",\n           CasesUnexposed = \"vector\",\n           ARExposed      = \"vector\",\n           ARUnexposed    = \"vector\",\n           RiskRatio      = \"vector\",\n           RiskCILow      = \"vector\",\n           RiskCIHight    = \"vector\",\n           Pvalue         = \"vector\",\n           output         = \"data.frame\"\n         )           \n)\n\n# ------------------------------------------------------------------------------\n# Real constructor\n# ------------------------------------------------------------------------------\nsetMethod(\"initialize\", \"CCInter\",\n          function(.Object, x, exposure, by)\n          {\n            #.Object <-  .Object;\n            \n            if (length(exposure) < 1) {\n              stop(\"Exposure is empty.\");\n            }\n            \n             .Col1Label = sprintf(\"CCInter %s / %s\", x, exposure);\n             .Object@Colnames = c( .Col1Label, \"Cases\", \"Controls\", \"P.est.\",\n                                   \"Statistics\", \"95%CI-L\", \"95%CI-H\");\n\n            label0 = sprintf(\"%s = Exposed\", by);\n            label1 = sprintf(\"%s = Unexposed\", by);\n            label2 = sprintf(\"Crude OR for %s\", exposure);\n            label3 = sprintf(\"MH OR %s adjusted for %s\", exposure, by);  \n            .Col1Values = c(label0, \"Exposed\", \"Unexposed\", \"Total\", \"Exposed %\", \"\",\n                            label1, \"Exposed\", \"Unexposed\", \"Total\", \"Exposed %\", \"\",\n                            \"Number of obs\", \"Missing\", \"MH test of Homogeneity pvalue\",\n                             label2, label3, \"Adjusted/crude relative change %\")\n\n            LABS_ESTIM <- c(\"Odds Ratio\", \"Attrib.risk.exp\", \"Attrib.risk.pop\", \"\", \"\",\"\");\n            L_CASES     = vector();\n            L_CONTROLS  = vector();\n            L_ESTIMATE  = vector();\n            L_STATS     = vector();\n            L_CIL       = vector();\n            L_CIH       = vector();\n            NB_TOTAL    = 0;\n            \n            for (i in 1:0) {\n              T = table(GDS[VAL(by)==i, exposure], GDS[VAL(by)==i, x])\n              #print(T)\n              L_CASES <- c(L_CASES, \"\", T[2,2], T[1,2]);\n              TOTAL <-  T[2,2] + T[1,2];\n              NB_TOTAL = NB_TOTAL + TOTAL;\n              EXPOSED_PC <- sprintf(\"%3.0f\", (T[2,2] / TOTAL) * 100);\n              L_CASES <- c(L_CASES, TOTAL, EXPOSED_PC,\"\");\n              \n              # CONTROLS\n              # ------------------------------------------------------------\n              L_CONTROLS <- c(L_CONTROLS, \"\", T[2,1], T[1,1]);\n              TOTAL <-  T[2,1] + T[1,1];\n              NB_TOTAL = NB_TOTAL + TOTAL;\n              EXPOSED_PC <- sprintf(\"%3.0f\", (T[2,1] / TOTAL) * 100);\n              L_CONTROLS <- c(L_CONTROLS, TOTAL, EXPOSED_PC,\"\");\n              \n              R = or(T); # ODDS RATIO ==============================\n              #print(R);\n              V_OR  = R[1]; # ODDS ratio\n              V_CIL = R[2]; # Confidence interval low\n              V_CIH = R[3]; # Confidence interval hight\n              OR = sprintf(\"%3.2f\", V_OR);\n              CIL = sprintf(\"%3.2f\", V_CIL);\n              CIH = sprintf(\"%3.2f\", V_CIH);\n              L_STATS <- c(L_STATS, OR);\n              L_CIL = c(L_CIL, CIL);\n              L_CIH = c(L_CIH, CIH);\n\n              R <- CC_AR(T);\n              V_AR  = R[1]; # Attrib.risk.exp\n              V_CIL = R[2]; # Confidence interval low\n              V_CIH = R[3]; # Confidence interval hight\n              AR = sprintf(\"%3.2f\", V_AR);\n              CIL = sprintf(\"%3.2f\", V_CIL);\n              CIH = sprintf(\"%3.2f\", V_CIH);\n              L_STATS <- c(L_STATS, AR);\n              L_CIL = c(L_CIL, CIL, \"\", \"\", \"\", \"\");\n              L_CIH = c(L_CIH, CIH, \"\", \"\", \"\", \"\");\n              \n              R <- CC_PAR(T);\n              AFP = sprintf(\"%3.2f\", R);\n              L_STATS <- c(L_STATS, AFP, \"\", \"\", \"\");\n              \n            }\n            \n            T <- table(GDS[,x], GDS[,exposure], GDS[,by]);\n            R <- CC_STATS(T);\n            #print(R)\n\n            # Number of obs\n            # ------------------------------------------------------------\n            L_CASES = c(L_CASES, NB_TOTAL);\n            \n            # MISSING\n            # ------------------------------------------------------------\n            MIS_TO = nrow(GDS) - NB_TOTAL;\n            MIS_PC = sprintf(\"%3.2f%s\", (MIS_TO / nrow(GDS))*100, '%');\n            L_CASES = c(L_CASES, MIS_TO);\n\n            # MH test of Homogeneity pvalue\n            # ------------------------------------------------------------\n            STAT = sprintf(\"%3.3f\", R$OR.homog[3]);\n            L_STATS <- c(L_STATS, \"\", \"\", STAT);\n            #print(sprintf(\"MH test of Homogeneity pvalue : %s\", STAT));\n            \n            # Crude OR for exposure\n            # ------------------------------------------------------------\n            STAT = sprintf(\"%3.2f\", R$OR.crude[1]);\n            CIL = sprintf(\"%3.2f\", R$OR.crude[3]);\n            CIH = sprintf(\"%3.2f\", R$OR.crude[4]);\n            L_STATS <- c(L_STATS, STAT);\n            L_CIL = c(L_CIL, \"\", \"\", \"\", CIL);\n            L_CIH = c(L_CIH, \"\", \"\", \"\", CIH);\n\n            # MH OR for exposure adjusted for by\n            # ------------------------------------------------------------\n            STAT = sprintf(\"%3.2f\", R$OR.mh[1]);\n            CIL = sprintf(\"%3.2f\", R$OR.mh[3]);\n            CIH = sprintf(\"%3.2f\", R$OR.mh[4]);\n            L_STATS <- c(L_STATS, STAT);\n            L_CIL = c(L_CIL, CIL);\n            L_CIH = c(L_CIH, CIH);\n            \n            # Adjusted/crude relative change\n            # ------------------------------------------------------------\n            RC = 100 * ((R$OR.mh[1]-R$OR.crude[1])/R$OR.crude[1]);\n            STAT = sprintf(\"%3.2f\", RC);\n            L_STATS <- c(L_STATS, STAT);\n            \n            \n            COL2 = c(L_CASES, \"\", \"\", \"\", \"\");\n            COL3 = c(L_CONTROLS, \"\", \"\", \"\", \"\", \"\", \"\");\n            COL4 = c(LABS_ESTIM, LABS_ESTIM, \"\", \"\", \"\", \"\", \"\", \"\")\n            COL5 = c(L_STATS);\n            COL6 = c(L_CIL, \"\");\n            COL7 = c(L_CIH, \"\");\n \n            DF <- data.frame(cbind(.Col1Values));\n            DF = cbind(DF, COL2, COL3, COL4, COL5, COL6, COL7);\n            names(DF) <- .Object@Colnames;\n            \n            .Object@output <- DF;\n            .Object;\n          });\n\n# -----------------------------------------------------------------------------\n# method show\n# -----------------------------------------------------------------------------\nsetMethod(\"show\" ,\"CCInter\" ,\n  function(object){\n    align  =  c(\"l\",\"r\",\"c\",\"c\",\"r\",\"r\",\"r\",\"r\");\n    ec.xtable(object@output, align=align);\n  }\n)\n\n# -----------------------------------------------------------------------------\n# function: CCInter (call real constructor)\n# Return: an object of type CCInter\n# -----------------------------------------------------------------------------\nCCInter <- function(x, exposure=\"\", by=\"\")\n{\n  return(new(\"CCInter\", x=x, exposure=exposure, by=by));\n}\n",
    "created" : 1422530027658.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3586086546",
    "id" : "12BF6C01",
    "lastKnownWriteTime" : 1422537876,
    "path" : "~/R HOUSE/Epiconcepts/R/CCInter.class.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}